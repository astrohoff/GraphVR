/* Generated By:CSharpCC: Do not edit this line. SyntaxChecker.cs */
namespace org.mariuszgromada.math.mxparser.syntaxchecker {
using System;
using System.IO;
[CLSCompliant(false)]
public sealed class SyntaxChecker : SyntaxCheckerConstants {
  public void checkSyntax()
  {
    start();
  }
  public void start() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTEGER:
    case LEFT_PAR:
    case PLUS:
    case MINUS:
    case NOT:
    case REAL:
    case IDENTIFIER:
    case FUNCTION:
    case 41:
      expression();
      mcc_consume_token(0);
      break;
    case 0:
      mcc_consume_token(0);
      break;
    default:
      mcc_la1[0] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }
  public void expression() {
    booleanExpression();
  }
  public void booleanExpression() {
    equalExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case OR:
      case AND:
      case IMP:
      case CIMP:
      case NIMP:
      case CNIMP:
      case NAND:
      case EQV:
      case NOR:
      case XOR:
        ;
        break;
      default:
        mcc_la1[1] = mcc_gen;
        goto label_1;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case OR:
        mcc_consume_token(OR);
        equalExpression();
        break;
      case AND:
        mcc_consume_token(AND);
        equalExpression();
        break;
      case NOR:
        mcc_consume_token(NOR);
        equalExpression();
        break;
      case NAND:
        mcc_consume_token(NAND);
        equalExpression();
        break;
      case XOR:
        mcc_consume_token(XOR);
        equalExpression();
        break;
      case IMP:
        mcc_consume_token(IMP);
        equalExpression();
        break;
      case CIMP:
        mcc_consume_token(CIMP);
        equalExpression();
        break;
      case NIMP:
        mcc_consume_token(NIMP);
        equalExpression();
        break;
      case CNIMP:
        mcc_consume_token(CNIMP);
        equalExpression();
        break;
      case EQV:
        mcc_consume_token(EQV);
        equalExpression();
        break;
      default:
        mcc_la1[2] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_1: ;
  }
  public void equalExpression() {
    relationalExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EQ:
      case NEQ:
      case LT:
      case LEQ:
      case GT:
      case GEQ:
        ;
        break;
      default:
        mcc_la1[3] = mcc_gen;
        goto label_2;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EQ:
        mcc_consume_token(EQ);
        relationalExpression();
        break;
      case NEQ:
        mcc_consume_token(NEQ);
        relationalExpression();
        break;
      case GT:
        mcc_consume_token(GT);
        relationalExpression();
        break;
      case GEQ:
        mcc_consume_token(GEQ);
        relationalExpression();
        break;
      case LT:
        mcc_consume_token(LT);
        relationalExpression();
        break;
      case LEQ:
        mcc_consume_token(LEQ);
        relationalExpression();
        break;
      default:
        mcc_la1[4] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_2: ;
  }
  public void relationalExpression() {
    additiveExpression();
  }
  public void additiveExpression() {
    multiplicativeExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        mcc_la1[5] = mcc_gen;
        goto label_3;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PLUS:
        mcc_consume_token(PLUS);
        multiplicativeExpression();
        break;
      case MINUS:
        mcc_consume_token(MINUS);
        multiplicativeExpression();
        break;
      default:
        mcc_la1[6] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_3: ;
  }
  public void multiplicativeExpression() {
    unaryExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case MULTIPLY:
      case DIV:
      case POWER:
      case MODULO:
        ;
        break;
      default:
        mcc_la1[7] = mcc_gen;
        goto label_4;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case POWER:
        mcc_consume_token(POWER);
        unaryExpression();
        break;
      case MULTIPLY:
        mcc_consume_token(MULTIPLY);
        unaryExpression();
        break;
      case DIV:
        mcc_consume_token(DIV);
        unaryExpression();
        break;
      case MODULO:
        mcc_consume_token(MODULO);
        unaryExpression();
        break;
      default:
        mcc_la1[8] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_4: ;
  }
  public void unaryExpression() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case NOT:
      mcc_consume_token(NOT);
      break;
    default:
      mcc_la1[9] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case PLUS:
    case MINUS:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case PLUS:
        mcc_consume_token(PLUS);
        break;
      case MINUS:
        mcc_consume_token(MINUS);
        break;
      default:
        mcc_la1[10] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[11] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTEGER:
    case REAL:
      realConstant();
      break;
    case IDENTIFIER:
    case FUNCTION:
    case 41:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case IDENTIFIER:
      case 41:
        identifier();
        break;
      case FUNCTION:
        mcc_consume_token(FUNCTION);
        break;
      default:
        mcc_la1[12] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case LEFT_PAR:
        mcc_consume_token(LEFT_PAR);
        argumentList();
        mcc_consume_token(RIGHT_PAR);
        break;
      default:
        mcc_la1[13] = mcc_gen;
        ;
        break;
      }
      break;
    case LEFT_PAR:
      mcc_consume_token(LEFT_PAR);
      expression();
      mcc_consume_token(RIGHT_PAR);
      break;
    default:
      mcc_la1[14] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case FACTORIAL:
      mcc_consume_token(FACTORIAL);
      break;
    default:
      mcc_la1[15] = mcc_gen;
      ;
      break;
    }
  }
  public void argumentList() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case INTEGER:
    case LEFT_PAR:
    case PLUS:
    case MINUS:
    case NOT:
    case REAL:
    case IDENTIFIER:
    case FUNCTION:
    case 41:
      expression();
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COMMA:
        case SEMICOLON:
          ;
          break;
        default:
          mcc_la1[16] = mcc_gen;
          goto label_5;
        }
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case COMMA:
          mcc_consume_token(COMMA);
          break;
        case SEMICOLON:
          mcc_consume_token(SEMICOLON);
          break;
        default:
          mcc_la1[17] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        expression();
      }label_5: ;
      break;
    default:
      mcc_la1[18] = mcc_gen;
      ;
      break;
    }
  }
  public void identifier() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case IDENTIFIER:
      mcc_consume_token(IDENTIFIER);
      break;
    case 41:
      mcc_consume_token(41);
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case CHAR:
          mcc_consume_token(CHAR);
          break;
        case IDENTIFIER:
          mcc_consume_token(IDENTIFIER);
          while (true) {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case LEFT_PAR:
            case RIGHT_PAR:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case POWER:
            case MODULO:
            case COMMA:
            case LT:
            case GT:
            case OR:
            case AND:
            case NOT:
            case REAL:
              ;
              break;
            default:
              mcc_la1[19] = mcc_gen;
              goto label_7;
            }
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case NOT:
              mcc_consume_token(NOT);
              break;
            case MODULO:
              mcc_consume_token(MODULO);
              break;
            case POWER:
              mcc_consume_token(POWER);
              break;
            case AND:
              mcc_consume_token(AND);
              break;
            case MULTIPLY:
              mcc_consume_token(MULTIPLY);
              break;
            case LEFT_PAR:
              mcc_consume_token(LEFT_PAR);
              break;
            case RIGHT_PAR:
              mcc_consume_token(RIGHT_PAR);
              break;
            case MINUS:
              mcc_consume_token(MINUS);
              break;
            case PLUS:
              mcc_consume_token(PLUS);
              break;
            case COMMA:
              mcc_consume_token(COMMA);
              break;
            case OR:
              mcc_consume_token(OR);
              break;
            case GT:
              mcc_consume_token(GT);
              break;
            case LT:
              mcc_consume_token(LT);
              break;
            case REAL:
              mcc_consume_token(REAL);
              break;
            default:
              mcc_la1[20] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
          }label_7: ;
          break;
        default:
          mcc_la1[21] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case CHAR:
        case IDENTIFIER:
          ;
          break;
        default:
          mcc_la1[22] = mcc_gen;
          goto label_6;
        }
      }label_6: ;
      mcc_consume_token(42);
      break;
    default:
      mcc_la1[23] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }
  public void realConstant() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case REAL:
      mcc_consume_token(REAL);
      break;
    case INTEGER:
      mcc_consume_token(INTEGER);
      break;
    default:
      mcc_la1[24] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }
  public SyntaxCheckerTokenManager token_source;
  SimpleCharStream mcc_input_stream;
  public Token token, mcc_nt;
  private int mcc_ntk;
  private int mcc_gen;
  private int[] mcc_la1 = new int[25];
  static private int[] mcc_la1_0;
  static private int[] mcc_la1_1;
  static SyntaxChecker() {
      mcc_gla1_0();
      mcc_gla1_1();
   }
   private static void mcc_gla1_0() {
      mcc_la1_0 = new int[] {268442369,-335544320,-335544320,66060288,66060288,6144,6144,122880,122880,268435456,6144,6144,0,512,768,131072,786432,786432,268442368,491109888,491109888,0,0,0,256,};
   }
   private static void mcc_gla1_1() {
      mcc_la1_1 = new int[] {960,31,31,0,0,0,0,0,0,0,0,0,896,0,960,0,0,0,960,64,64,160,160,640,64,};
   }
  public SyntaxChecker(System.IO.Stream stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxCheckerTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 25; i++) mcc_la1[i] = -1;
  }
  public void ReInit(System.IO.Stream stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 25; i++) mcc_la1[i] = -1;
  }
  public SyntaxChecker(System.IO.TextReader stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SyntaxCheckerTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 25; i++) mcc_la1[i] = -1;
  }
  public void ReInit(System.IO.TextReader stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 25; i++) mcc_la1[i] = -1;
  }
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 25; i++) mcc_la1[i] = -1;
  }
  public void ReInit(SyntaxCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 25; i++) mcc_la1[i] = -1;
  }
   private Token mcc_consume_token(int kind) {
    Token oldToken = null;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    if (token.kind == kind) {
      mcc_gen++;
      return token;
    }
    token = oldToken;
    mcc_kind = kind;
    throw GenerateParseException();
  }
  public Token GetNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    mcc_gen++;
    return token;
  }
  public Token GetToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.GetNextToken();
    }
    return t;
  }
  private int mcc_mntk() {
    if ((mcc_nt=token.next) == null)
      return (mcc_ntk = (token.next=token_source.GetNextToken()).kind);
    else
      return (mcc_ntk = mcc_nt.kind);
  }
  private System.Collections.ArrayList mcc_expentries = new System.Collections.ArrayList();
  private int[] mcc_expentry;
  private int mcc_kind = -1;
  public ParseException GenerateParseException() {
    mcc_expentries.Clear();
    bool[] la1tokens = new bool[45];
    for (int i = 0; i < 45; i++) {
      la1tokens[i] = false;
    }
    if (mcc_kind >= 0) {
      la1tokens[mcc_kind] = true;
      mcc_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (mcc_la1[i] == mcc_gen) {
        for (int j = 0; j < 32; j++) {
          if ((mcc_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((mcc_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        mcc_expentry = new int[1];
        mcc_expentry[0] = i;
        mcc_expentries.Add(mcc_expentry);
      }
    }
    int[][] exptokseq = new int[mcc_expentries.Count][];
    for (int i = 0; i < mcc_expentries.Count; i++) {
      exptokseq[i] = (int[])mcc_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }
  public void enable_tracing() {
  }
  public void disable_tracing() {
  }
}
}
